
I2C_TestApp_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000356  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  00000356  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000356  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000388  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d05  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f3  00000000  00000000  000011e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c8a  00000000  00000000  000019dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000234  00000000  00000000  00002668  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000567  00000000  00000000  0000289c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bfc  00000000  00000000  00002e03  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000039ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 25 01 	jmp	0x24a	; 0x24a <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 36       	cpi	r26, 0x67	; 103
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 6f 01 	jmp	0x2de	; 0x2de <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include "../MCAL/I2C/I2C.h"
#include "../MCAL/TIMER0/TIMER0.h"
#include "../MCAL/DIO/DIO.h"

int main(void)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	1f 92       	push	r1
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
	I2C_Init();
  86:	0e 94 df 00 	call	0x1be	; 0x1be <I2C_Init>
	TIMER0_u8Init();
  8a:	0e 94 03 01 	call	0x206	; 0x206 <TIMER0_u8Init>
	DIO_u8SetPortDirection(PORTB,OUTPUTPORT);
  8e:	61 e0       	ldi	r22, 0x01	; 1
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	0e 94 56 00 	call	0xac	; 0xac <DIO_u8SetPortDirection>
	uint8_t data ;
    while (1) 
    {
        I2C_ReceiveDataWithAck(&data);
  96:	ce 01       	movw	r24, r28
  98:	01 96       	adiw	r24, 0x01	; 1
  9a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <I2C_ReceiveDataWithAck>
		if ( data != ( I2C_ADDRESS<<1 ))
  9e:	69 81       	ldd	r22, Y+1	; 0x01
  a0:	68 3c       	cpi	r22, 0xC8	; 200
  a2:	c9 f3       	breq	.-14     	; 0x96 <main+0x1a>
			DIO_u8SetPortData(PORTB,data);
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_u8SetPortData>
  aa:	f5 cf       	rjmp	.-22     	; 0x96 <main+0x1a>

000000ac <DIO_u8SetPortDirection>:
  }
  else
  	u8ErrorState = SetPinDirection_Error ;
 	
  return u8ErrorState;
}
  ac:	81 30       	cpi	r24, 0x01	; 1
  ae:	f9 f0       	breq	.+62     	; 0xee <DIO_u8SetPortDirection+0x42>
  b0:	30 f0       	brcs	.+12     	; 0xbe <DIO_u8SetPortDirection+0x12>
  b2:	82 30       	cpi	r24, 0x02	; 2
  b4:	a1 f1       	breq	.+104    	; 0x11e <DIO_u8SetPortDirection+0x72>
  b6:	83 30       	cpi	r24, 0x03	; 3
  b8:	09 f4       	brne	.+2      	; 0xbc <DIO_u8SetPortDirection+0x10>
  ba:	49 c0       	rjmp	.+146    	; 0x14e <DIO_u8SetPortDirection+0xa2>
  bc:	60 c0       	rjmp	.+192    	; 0x17e <DIO_u8SetPortDirection+0xd2>
  be:	61 30       	cpi	r22, 0x01	; 1
  c0:	91 f0       	breq	.+36     	; 0xe6 <DIO_u8SetPortDirection+0x3a>
  c2:	18 f0       	brcs	.+6      	; 0xca <DIO_u8SetPortDirection+0x1e>
  c4:	62 30       	cpi	r22, 0x02	; 2
  c6:	39 f0       	breq	.+14     	; 0xd6 <DIO_u8SetPortDirection+0x2a>
  c8:	5c c0       	rjmp	.+184    	; 0x182 <DIO_u8SetPortDirection+0xd6>
  ca:	1a ba       	out	0x1a, r1	; 26
  cc:	80 b7       	in	r24, 0x30	; 48
  ce:	84 60       	ori	r24, 0x04	; 4
  d0:	80 bf       	out	0x30, r24	; 48
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	08 95       	ret
  d6:	80 b7       	in	r24, 0x30	; 48
  d8:	8b 7f       	andi	r24, 0xFB	; 251
  da:	80 bf       	out	0x30, r24	; 48
  dc:	1a ba       	out	0x1a, r1	; 26
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	8b bb       	out	0x1b, r24	; 27
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	08 95       	ret
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	8a bb       	out	0x1a, r24	; 26
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	08 95       	ret
  ee:	61 30       	cpi	r22, 0x01	; 1
  f0:	91 f0       	breq	.+36     	; 0x116 <DIO_u8SetPortDirection+0x6a>
  f2:	18 f0       	brcs	.+6      	; 0xfa <DIO_u8SetPortDirection+0x4e>
  f4:	62 30       	cpi	r22, 0x02	; 2
  f6:	39 f0       	breq	.+14     	; 0x106 <DIO_u8SetPortDirection+0x5a>
  f8:	46 c0       	rjmp	.+140    	; 0x186 <DIO_u8SetPortDirection+0xda>
  fa:	17 ba       	out	0x17, r1	; 23
  fc:	80 b7       	in	r24, 0x30	; 48
  fe:	84 60       	ori	r24, 0x04	; 4
 100:	80 bf       	out	0x30, r24	; 48
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	08 95       	ret
 106:	80 b7       	in	r24, 0x30	; 48
 108:	8b 7f       	andi	r24, 0xFB	; 251
 10a:	80 bf       	out	0x30, r24	; 48
 10c:	17 ba       	out	0x17, r1	; 23
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	88 bb       	out	0x18, r24	; 24
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	08 95       	ret
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	87 bb       	out	0x17, r24	; 23
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	08 95       	ret
 11e:	61 30       	cpi	r22, 0x01	; 1
 120:	91 f0       	breq	.+36     	; 0x146 <DIO_u8SetPortDirection+0x9a>
 122:	18 f0       	brcs	.+6      	; 0x12a <DIO_u8SetPortDirection+0x7e>
 124:	62 30       	cpi	r22, 0x02	; 2
 126:	39 f0       	breq	.+14     	; 0x136 <DIO_u8SetPortDirection+0x8a>
 128:	30 c0       	rjmp	.+96     	; 0x18a <DIO_u8SetPortDirection+0xde>
 12a:	14 ba       	out	0x14, r1	; 20
 12c:	80 b7       	in	r24, 0x30	; 48
 12e:	84 60       	ori	r24, 0x04	; 4
 130:	80 bf       	out	0x30, r24	; 48
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	08 95       	ret
 136:	80 b7       	in	r24, 0x30	; 48
 138:	8b 7f       	andi	r24, 0xFB	; 251
 13a:	80 bf       	out	0x30, r24	; 48
 13c:	14 ba       	out	0x14, r1	; 20
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	85 bb       	out	0x15, r24	; 21
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	08 95       	ret
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	84 bb       	out	0x14, r24	; 20
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	08 95       	ret
 14e:	61 30       	cpi	r22, 0x01	; 1
 150:	91 f0       	breq	.+36     	; 0x176 <DIO_u8SetPortDirection+0xca>
 152:	18 f0       	brcs	.+6      	; 0x15a <DIO_u8SetPortDirection+0xae>
 154:	62 30       	cpi	r22, 0x02	; 2
 156:	39 f0       	breq	.+14     	; 0x166 <DIO_u8SetPortDirection+0xba>
 158:	1a c0       	rjmp	.+52     	; 0x18e <DIO_u8SetPortDirection+0xe2>
 15a:	11 ba       	out	0x11, r1	; 17
 15c:	80 b7       	in	r24, 0x30	; 48
 15e:	84 60       	ori	r24, 0x04	; 4
 160:	80 bf       	out	0x30, r24	; 48
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	08 95       	ret
 166:	80 b7       	in	r24, 0x30	; 48
 168:	8b 7f       	andi	r24, 0xFB	; 251
 16a:	80 bf       	out	0x30, r24	; 48
 16c:	11 ba       	out	0x11, r1	; 17
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	82 bb       	out	0x12, r24	; 18
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	08 95       	ret
 176:	8f ef       	ldi	r24, 0xFF	; 255
 178:	81 bb       	out	0x11, r24	; 17
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	08 95       	ret
 17e:	81 e1       	ldi	r24, 0x11	; 17
 180:	08 95       	ret
 182:	81 e1       	ldi	r24, 0x11	; 17
 184:	08 95       	ret
 186:	81 e1       	ldi	r24, 0x11	; 17
 188:	08 95       	ret
 18a:	81 e1       	ldi	r24, 0x11	; 17
 18c:	08 95       	ret
 18e:	81 e1       	ldi	r24, 0x11	; 17
 190:	08 95       	ret

00000192 <DIO_u8SetPortData>:

// function to assign value to port
uint8_t DIO_u8SetPortData(uint8_t port, uint8_t data)
{ 
	uint8_t u8ErrorState = STD_TYPES_OK ;
	switch(port)
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	49 f0       	breq	.+18     	; 0x1a8 <DIO_u8SetPortData+0x16>
 196:	28 f0       	brcs	.+10     	; 0x1a2 <DIO_u8SetPortData+0x10>
 198:	82 30       	cpi	r24, 0x02	; 2
 19a:	49 f0       	breq	.+18     	; 0x1ae <DIO_u8SetPortData+0x1c>
 19c:	83 30       	cpi	r24, 0x03	; 3
 19e:	51 f0       	breq	.+20     	; 0x1b4 <DIO_u8SetPortData+0x22>
 1a0:	0c c0       	rjmp	.+24     	; 0x1ba <DIO_u8SetPortData+0x28>
	{
		// check which port and assign value to this port 
		case PORTA:
			PORTA_REG = data;
 1a2:	6b bb       	out	0x1b, r22	; 27
}

// function to assign value to port
uint8_t DIO_u8SetPortData(uint8_t port, uint8_t data)
{ 
	uint8_t u8ErrorState = STD_TYPES_OK ;
 1a4:	80 e0       	ldi	r24, 0x00	; 0
	switch(port)
	{
		// check which port and assign value to this port 
		case PORTA:
			PORTA_REG = data;
			break;
 1a6:	08 95       	ret
			
		case PORTB:
			PORTB_REG = data;
 1a8:	68 bb       	out	0x18, r22	; 24
}

// function to assign value to port
uint8_t DIO_u8SetPortData(uint8_t port, uint8_t data)
{ 
	uint8_t u8ErrorState = STD_TYPES_OK ;
 1aa:	80 e0       	ldi	r24, 0x00	; 0
			PORTA_REG = data;
			break;
			
		case PORTB:
			PORTB_REG = data;
			break;
 1ac:	08 95       	ret
			
		case PORTC:
			PORTC_REG = data;
 1ae:	65 bb       	out	0x15, r22	; 21
}

// function to assign value to port
uint8_t DIO_u8SetPortData(uint8_t port, uint8_t data)
{ 
	uint8_t u8ErrorState = STD_TYPES_OK ;
 1b0:	80 e0       	ldi	r24, 0x00	; 0
			PORTB_REG = data;
			break;
			
		case PORTC:
			PORTC_REG = data;
			break;
 1b2:	08 95       	ret
		
		case PORTD:
			PORTD_REG = data;
 1b4:	62 bb       	out	0x12, r22	; 18
}

// function to assign value to port
uint8_t DIO_u8SetPortData(uint8_t port, uint8_t data)
{ 
	uint8_t u8ErrorState = STD_TYPES_OK ;
 1b6:	80 e0       	ldi	r24, 0x00	; 0
			PORTC_REG = data;
			break;
		
		case PORTD:
			PORTD_REG = data;
			break;
 1b8:	08 95       	ret
	
		default:
		u8ErrorState = SetPortData_Error ;
 1ba:	83 e1       	ldi	r24, 0x13	; 19
	}
	return u8ErrorState ;
}
 1bc:	08 95       	ret

000001be <I2C_Init>:
	// reset flag Start sending address and operation
	TWCR_REG = 0 ;
	SET_BIT(TWCR_REG,TWINT_BIT);
	SET_BIT(TWCR_REG,TWEN_BIT);
	while((GET_BIT(TWCR_REG,TWINT_BIT))==0);        //wait until operation complete
	*u8Data	= TWDR_REG ;
 1be:	86 b7       	in	r24, 0x36	; 54
 1c0:	84 60       	ori	r24, 0x04	; 4
 1c2:	86 bf       	out	0x36, r24	; 54
 1c4:	80 e2       	ldi	r24, 0x20	; 32
 1c6:	80 b9       	out	0x00, r24	; 0
 1c8:	81 b1       	in	r24, 0x01	; 1
 1ca:	81 60       	ori	r24, 0x01	; 1
 1cc:	81 b9       	out	0x01, r24	; 1
 1ce:	81 b1       	in	r24, 0x01	; 1
 1d0:	82 60       	ori	r24, 0x02	; 2
 1d2:	81 b9       	out	0x01, r24	; 1
 1d4:	81 b1       	in	r24, 0x01	; 1
 1d6:	88 7f       	andi	r24, 0xF8	; 248
 1d8:	81 b9       	out	0x01, r24	; 1
 1da:	88 ec       	ldi	r24, 0xC8	; 200
 1dc:	82 b9       	out	0x02, r24	; 2
 1de:	08 95       	ret

000001e0 <I2C_ReceiveDataWithAck>:
}

void I2C_ReceiveDataWithAck(uint8_t * u8Data)
{	
 1e0:	fc 01       	movw	r30, r24
	// reset flag Start sending address and operation and enable ACK BIT
	SET_BIT(TWCR_REG,TWINT_BIT);
 1e2:	96 b7       	in	r25, 0x36	; 54
 1e4:	90 68       	ori	r25, 0x80	; 128
 1e6:	96 bf       	out	0x36, r25	; 54
	SET_BIT(TWCR_REG,TWEA_BIT);
 1e8:	96 b7       	in	r25, 0x36	; 54
 1ea:	90 64       	ori	r25, 0x40	; 64
 1ec:	96 bf       	out	0x36, r25	; 54
	CLR_BIT(TWCR_REG,TWSTO_BIT);
 1ee:	96 b7       	in	r25, 0x36	; 54
 1f0:	9f 7e       	andi	r25, 0xEF	; 239
 1f2:	96 bf       	out	0x36, r25	; 54
	SET_BIT(TWCR_REG,TWEN_BIT);
 1f4:	96 b7       	in	r25, 0x36	; 54
 1f6:	94 60       	ori	r25, 0x04	; 4
 1f8:	96 bf       	out	0x36, r25	; 54
	
	while((GET_BIT(TWCR_REG,TWINT_BIT))==0);        //wait until operation complete
 1fa:	06 b6       	in	r0, 0x36	; 54
 1fc:	07 fe       	sbrs	r0, 7
 1fe:	fd cf       	rjmp	.-6      	; 0x1fa <I2C_ReceiveDataWithAck+0x1a>
	*u8Data	= TWDR_REG ;
 200:	83 b1       	in	r24, 0x03	; 3
 202:	80 83       	st	Z, r24
 204:	08 95       	ret

00000206 <TIMER0_u8Init>:
		TIMER0_u8Stop();
		delay_state = DELAY_AVAILABLE;
		u8ErrorState = STD_TYPES_OK ;
	}
	return u8ErrorState ;
}
 206:	83 b7       	in	r24, 0x33	; 51
 208:	8f 7b       	andi	r24, 0xBF	; 191
 20a:	83 bf       	out	0x33, r24	; 51
 20c:	83 b7       	in	r24, 0x33	; 51
 20e:	88 60       	ori	r24, 0x08	; 8
 210:	83 bf       	out	0x33, r24	; 51
 212:	8f b7       	in	r24, 0x3f	; 63
 214:	80 68       	ori	r24, 0x80	; 128
 216:	8f bf       	out	0x3f, r24	; 63
 218:	89 b7       	in	r24, 0x39	; 57
 21a:	82 60       	ori	r24, 0x02	; 2
 21c:	89 bf       	out	0x39, r24	; 57
 21e:	03 b6       	in	r0, 0x33	; 51
 220:	06 fc       	sbrc	r0, 6
 222:	0b c0       	rjmp	.+22     	; 0x23a <TIMER0_u8Init+0x34>
 224:	03 b6       	in	r0, 0x33	; 51
 226:	03 fe       	sbrs	r0, 3
 228:	0a c0       	rjmp	.+20     	; 0x23e <TIMER0_u8Init+0x38>
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	07 fe       	sbrs	r0, 7
 22e:	09 c0       	rjmp	.+18     	; 0x242 <TIMER0_u8Init+0x3c>
 230:	09 b6       	in	r0, 0x39	; 57
 232:	01 fc       	sbrc	r0, 1
 234:	08 c0       	rjmp	.+16     	; 0x246 <TIMER0_u8Init+0x40>
 236:	81 e4       	ldi	r24, 0x41	; 65
 238:	08 95       	ret
 23a:	81 e4       	ldi	r24, 0x41	; 65
 23c:	08 95       	ret
 23e:	81 e4       	ldi	r24, 0x41	; 65
 240:	08 95       	ret
 242:	81 e4       	ldi	r24, 0x41	; 65
 244:	08 95       	ret
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	08 95       	ret

0000024a <__vector_10>:

// ISR 
void __vector_10(void)
{
 24a:	1f 92       	push	r1
 24c:	0f 92       	push	r0
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	0f 92       	push	r0
 252:	11 24       	eor	r1, r1
 254:	2f 93       	push	r18
 256:	3f 93       	push	r19
 258:	4f 93       	push	r20
 25a:	5f 93       	push	r21
 25c:	6f 93       	push	r22
 25e:	7f 93       	push	r23
 260:	8f 93       	push	r24
 262:	9f 93       	push	r25
 264:	af 93       	push	r26
 266:	bf 93       	push	r27
 268:	ef 93       	push	r30
 26a:	ff 93       	push	r31
	counter++;            // increment counter to compare with delay 
 26c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <counter>
 270:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <counter+0x1>
 274:	01 96       	adiw	r24, 0x01	; 1
 276:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <counter+0x1>
 27a:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <counter>
	if(counter == compare && delayCallBack != NULL)				// if delay finished and there function address to call  
 27e:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <counter>
 282:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <counter+0x1>
 286:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <compare>
 28a:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <compare+0x1>
 28e:	28 17       	cp	r18, r24
 290:	39 07       	cpc	r19, r25
 292:	a1 f4       	brne	.+40     	; 0x2bc <__vector_10+0x72>
 294:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 298:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 29c:	89 2b       	or	r24, r25
 29e:	71 f0       	breq	.+28     	; 0x2bc <__vector_10+0x72>
	{
		counter = 0;
 2a0:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <counter+0x1>
 2a4:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <counter>
		CLR_BIT(TIMSK_REG, OCIE0);							// reset interrupt 
 2a8:	89 b7       	in	r24, 0x39	; 57
 2aa:	8d 7f       	andi	r24, 0xFD	; 253
 2ac:	89 bf       	out	0x39, r24	; 57
		delay_state = DELAY_AVAILABLE ;
 2ae:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <delay_state>
		delayCallBack();									// call the function 
 2b2:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2b6:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2ba:	09 95       	icall
	}
 2bc:	ff 91       	pop	r31
 2be:	ef 91       	pop	r30
 2c0:	bf 91       	pop	r27
 2c2:	af 91       	pop	r26
 2c4:	9f 91       	pop	r25
 2c6:	8f 91       	pop	r24
 2c8:	7f 91       	pop	r23
 2ca:	6f 91       	pop	r22
 2cc:	5f 91       	pop	r21
 2ce:	4f 91       	pop	r20
 2d0:	3f 91       	pop	r19
 2d2:	2f 91       	pop	r18
 2d4:	0f 90       	pop	r0
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	0f 90       	pop	r0
 2da:	1f 90       	pop	r1
 2dc:	18 95       	reti

000002de <_exit>:
 2de:	f8 94       	cli

000002e0 <__stop_program>:
 2e0:	ff cf       	rjmp	.-2      	; 0x2e0 <__stop_program>
