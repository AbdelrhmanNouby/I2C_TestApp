
I2C_TestApp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  00000258  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009e2  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006da  00000000  00000000  00000d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000061c  00000000  00000000  00001448  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  00001a64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b0  00000000  00000000  00001bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000374  00000000  00000000  000020a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002418  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 36       	cpi	r26, 0x67	; 103
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include "../MCAL/I2C/I2C.h"
#include "../MCAL/TIMER0/TIMER0.h"

int main(void)
{
	I2C_Init();
  7c:	0e 94 4c 00 	call	0x98	; 0x98 <I2C_Init>
	TIMER0_u8Init();
  80:	0e 94 84 00 	call	0x108	; 0x108 <TIMER0_u8Init>
    I2C_SendStartCondition();
  84:	0e 94 5b 00 	call	0xb6	; 0xb6 <I2C_SendStartCondition>
    I2C_SendSlaveAddress(I2C_SLAVE1_ADDRESS,WRITE_OP);
  88:	60 e0       	ldi	r22, 0x00	; 0
  8a:	84 e6       	ldi	r24, 0x64	; 100
  8c:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_SendSlaveAddress>
	while (1) 
    {
		I2C_SendByte(0x50);
  90:	80 e5       	ldi	r24, 0x50	; 80
  92:	0e 94 79 00 	call	0xf2	; 0xf2 <I2C_SendByte>
  96:	fc cf       	rjmp	.-8      	; 0x90 <main+0x14>

00000098 <I2C_Init>:
		u8State = STATUS_AS_EXPECTED ;
	else
		u8State = STATUS_NOT_AS_EXPECTED ;	
	
	return u8State ;
}
  98:	86 b7       	in	r24, 0x36	; 54
  9a:	84 60       	ori	r24, 0x04	; 4
  9c:	86 bf       	out	0x36, r24	; 54
  9e:	80 e2       	ldi	r24, 0x20	; 32
  a0:	80 b9       	out	0x00, r24	; 0
  a2:	81 b1       	in	r24, 0x01	; 1
  a4:	81 60       	ori	r24, 0x01	; 1
  a6:	81 b9       	out	0x01, r24	; 1
  a8:	81 b1       	in	r24, 0x01	; 1
  aa:	82 60       	ori	r24, 0x02	; 2
  ac:	81 b9       	out	0x01, r24	; 1
  ae:	81 b1       	in	r24, 0x01	; 1
  b0:	88 7f       	andi	r24, 0xF8	; 248
  b2:	81 b9       	out	0x01, r24	; 1
  b4:	08 95       	ret

000000b6 <I2C_SendStartCondition>:
  b6:	86 b7       	in	r24, 0x36	; 54
  b8:	80 68       	ori	r24, 0x80	; 128
  ba:	86 bf       	out	0x36, r24	; 54
  bc:	86 b7       	in	r24, 0x36	; 54
  be:	80 62       	ori	r24, 0x20	; 32
  c0:	86 bf       	out	0x36, r24	; 54
  c2:	86 b7       	in	r24, 0x36	; 54
  c4:	84 60       	ori	r24, 0x04	; 4
  c6:	86 bf       	out	0x36, r24	; 54
  c8:	06 b6       	in	r0, 0x36	; 54
  ca:	07 fe       	sbrs	r0, 7
  cc:	fd cf       	rjmp	.-6      	; 0xc8 <I2C_SendStartCondition+0x12>
  ce:	84 e0       	ldi	r24, 0x04	; 4
  d0:	86 bf       	out	0x36, r24	; 54
  d2:	08 95       	ret

000000d4 <I2C_SendSlaveAddress>:

void I2C_SendSlaveAddress(uint8_t u8SlaveAdd,uint8_t u8Operation)
{
	TWDR_REG = (u8SlaveAdd<<1)|(u8Operation);				//Put address and operation in TWDR Reg
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	86 2b       	or	r24, r22
  dc:	83 b9       	out	0x03, r24	; 3
	// reset flag Start sending address and operation
	SET_BIT(TWCR_REG,TWINT_BIT);
  de:	86 b7       	in	r24, 0x36	; 54
  e0:	80 68       	ori	r24, 0x80	; 128
  e2:	86 bf       	out	0x36, r24	; 54
	SET_BIT(TWCR_REG,TWEN_BIT);  
  e4:	86 b7       	in	r24, 0x36	; 54
  e6:	84 60       	ori	r24, 0x04	; 4
  e8:	86 bf       	out	0x36, r24	; 54
	while((GET_BIT(TWCR_REG,TWINT_BIT))==0);	        //wait until operation complete	
  ea:	06 b6       	in	r0, 0x36	; 54
  ec:	07 fe       	sbrs	r0, 7
  ee:	fd cf       	rjmp	.-6      	; 0xea <I2C_SendSlaveAddress+0x16>
}
  f0:	08 95       	ret

000000f2 <I2C_SendByte>:

void I2C_SendByte(uint8_t u8Data)
{
	TWDR_REG = u8Data;				// assign the character to data REG
  f2:	83 b9       	out	0x03, r24	; 3
	// reset flag Start sending address and operation
	SET_BIT(TWCR_REG,TWINT_BIT);
  f4:	86 b7       	in	r24, 0x36	; 54
  f6:	80 68       	ori	r24, 0x80	; 128
  f8:	86 bf       	out	0x36, r24	; 54
	SET_BIT(TWCR_REG,TWEN_BIT);
  fa:	86 b7       	in	r24, 0x36	; 54
  fc:	84 60       	ori	r24, 0x04	; 4
  fe:	86 bf       	out	0x36, r24	; 54
	while((GET_BIT(TWCR_REG,TWINT_BIT))==0);        //wait until operation complete	
 100:	06 b6       	in	r0, 0x36	; 54
 102:	07 fe       	sbrs	r0, 7
 104:	fd cf       	rjmp	.-6      	; 0x100 <I2C_SendByte+0xe>
}
 106:	08 95       	ret

00000108 <TIMER0_u8Init>:
		TIMER0_u8Stop();
		delay_state = DELAY_AVAILABLE;
		u8ErrorState = STD_TYPES_OK ;
	}
	return u8ErrorState ;
}
 108:	83 b7       	in	r24, 0x33	; 51
 10a:	8f 7b       	andi	r24, 0xBF	; 191
 10c:	83 bf       	out	0x33, r24	; 51
 10e:	83 b7       	in	r24, 0x33	; 51
 110:	88 60       	ori	r24, 0x08	; 8
 112:	83 bf       	out	0x33, r24	; 51
 114:	8f b7       	in	r24, 0x3f	; 63
 116:	80 68       	ori	r24, 0x80	; 128
 118:	8f bf       	out	0x3f, r24	; 63
 11a:	89 b7       	in	r24, 0x39	; 57
 11c:	82 60       	ori	r24, 0x02	; 2
 11e:	89 bf       	out	0x39, r24	; 57
 120:	03 b6       	in	r0, 0x33	; 51
 122:	06 fc       	sbrc	r0, 6
 124:	0b c0       	rjmp	.+22     	; 0x13c <TIMER0_u8Init+0x34>
 126:	03 b6       	in	r0, 0x33	; 51
 128:	03 fe       	sbrs	r0, 3
 12a:	0a c0       	rjmp	.+20     	; 0x140 <TIMER0_u8Init+0x38>
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	07 fe       	sbrs	r0, 7
 130:	09 c0       	rjmp	.+18     	; 0x144 <TIMER0_u8Init+0x3c>
 132:	09 b6       	in	r0, 0x39	; 57
 134:	01 fc       	sbrc	r0, 1
 136:	08 c0       	rjmp	.+16     	; 0x148 <TIMER0_u8Init+0x40>
 138:	81 e4       	ldi	r24, 0x41	; 65
 13a:	08 95       	ret
 13c:	81 e4       	ldi	r24, 0x41	; 65
 13e:	08 95       	ret
 140:	81 e4       	ldi	r24, 0x41	; 65
 142:	08 95       	ret
 144:	81 e4       	ldi	r24, 0x41	; 65
 146:	08 95       	ret
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	08 95       	ret

0000014c <__vector_10>:

// ISR 
void __vector_10(void)
{
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	2f 93       	push	r18
 158:	3f 93       	push	r19
 15a:	4f 93       	push	r20
 15c:	5f 93       	push	r21
 15e:	6f 93       	push	r22
 160:	7f 93       	push	r23
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
 166:	af 93       	push	r26
 168:	bf 93       	push	r27
 16a:	ef 93       	push	r30
 16c:	ff 93       	push	r31
	counter++;            // increment counter to compare with delay 
 16e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <counter>
 172:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <counter+0x1>
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <counter+0x1>
 17c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <counter>
	if(counter == compare && delayCallBack != NULL)				// if delay finished and there function address to call  
 180:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <counter>
 184:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <counter+0x1>
 188:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <compare>
 18c:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <compare+0x1>
 190:	28 17       	cp	r18, r24
 192:	39 07       	cpc	r19, r25
 194:	a1 f4       	brne	.+40     	; 0x1be <__vector_10+0x72>
 196:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 19a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 19e:	89 2b       	or	r24, r25
 1a0:	71 f0       	breq	.+28     	; 0x1be <__vector_10+0x72>
	{
		counter = 0;
 1a2:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <counter+0x1>
 1a6:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <counter>
		CLR_BIT(TIMSK_REG, OCIE0);							// reset interrupt 
 1aa:	89 b7       	in	r24, 0x39	; 57
 1ac:	8d 7f       	andi	r24, 0xFD	; 253
 1ae:	89 bf       	out	0x39, r24	; 57
		delay_state = DELAY_AVAILABLE ;
 1b0:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <delay_state>
		delayCallBack();									// call the function 
 1b4:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1b8:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1bc:	09 95       	icall
	}
 1be:	ff 91       	pop	r31
 1c0:	ef 91       	pop	r30
 1c2:	bf 91       	pop	r27
 1c4:	af 91       	pop	r26
 1c6:	9f 91       	pop	r25
 1c8:	8f 91       	pop	r24
 1ca:	7f 91       	pop	r23
 1cc:	6f 91       	pop	r22
 1ce:	5f 91       	pop	r21
 1d0:	4f 91       	pop	r20
 1d2:	3f 91       	pop	r19
 1d4:	2f 91       	pop	r18
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <_exit>:
 1e0:	f8 94       	cli

000001e2 <__stop_program>:
 1e2:	ff cf       	rjmp	.-2      	; 0x1e2 <__stop_program>
